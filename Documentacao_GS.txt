Autores:
- Laura Barreto - RM561965
- Matheus Freitas Vieira - RM566198
- Natália Camargo - RM565769


OBJETIVO DO SISTEMA:

O objetivo desse sistema em Python é demonstrar um mecanismo de monitoramento de níveis de água e a integração de alertas comunitários 
para a prevenção de incidentes relacionados a enchentes e alagamentos. O sistema visa:

Simular a Vigilância Contínua: Representar como um sistema automatizado poderia monitorar o nível de água em um corpo hídrico (rio ou 
reservatório), fornecendo uma base para a tomada de decisões.

Capacitar a Ação Comunitária: Ilustrar a importância da participação cidadã ao permitir que usuários reportem ocorrências 
observadas no ambiente, como alagamentos de vias ou o rápido aumento do nível de rios, enriquecendo o sistema com informações locais e em
tempo real.

Emitir Alertas Preventivos Graduados: Com base nos dados do sensor simulado e nos relatos da comunidade, o sistema busca gerar alertas 
classificados por criticidade (Seguro, Alerta, Risco Crítico). O objetivo é fornecer informações que permitam à população e às autoridades
tomar medidas preventivas antes que um evento crítico se agrave.

Servir como Ferramenta Conceitual: Apresentar, de forma simplificada, como os componentes de software podem processar diferentes tipos de 
entrada (dados de sensor e dados de usuário) para alcançar um objetivo comum de segurança e prevenção em contextos de desastres naturais.


FUNCIONALIDADES DO SISTEMA:

O usuário deve primeiro fazer login ou se cadastrar, caso ainda não tenha uma conta.

Depois disso, ele verá informações sobre o nível atual do rio, que é gerado por um simulador. Esse simulador começa com um valor 
aleatório e vai aumentando a cada siclo de medição simulada.

Com base nesse nível, o sistema mostra uma das seguintes situações:

Nível seguro: abaixo de 50%
Alerta: entre 50% e 70%
Risco crítico: acima de 70%

Além de ver essas informações, o usuário também pode criar alertas para a comunidade sobre situações relacionadas a enchentes. Existem 5
tipos de alerta que podem ser enviados:

1. Alagamento de via
2. Bueiro entupido com acúmulo de água
3. Nível de rio ou córrego subindo rapidamente
4. Risco de deslizamento por causa da chuva
5. Outro tipo de ocorrência relacionada a enchentes

Para enviar um alerta, o usuário deve informar o local onde está acontecendo o problema e descrever a situação. Esses relatos ajudam a
gerar alertas para outras pessoas da comunidade.


COMPONENTES GLOBAIS DO SISTEMA:

ALTURA_TOTAL_RESERVATORIO_CM:
  Altura máxima do reservatório monitorado (em centímetros).

LIMIAR_ATENCAO_PERCENT / LIMIAR_CRITICO_PERCENT:
  Percentuais que determinam os níveis de "atenção" (50%) e "crítico" (70%).

DADOS_SENSOR_SIMULADOS:
  Lista de leituras simuladas do sensor com valores que representam os níveis seguros, 
  de atenção e críticos, além de valores para erro/reset.

indice_leitura_sensor:
  Controla a posição atual da próxima leitura simulada. Iniciado aleatoriamente entre os 4 primeiros índices.



FUNÇÕES PRINCIPAIS:


validar_entrada_texto_obrigatorio(prompt_usuario, tamanho_max=150)
  Solicita ao usuário um texto obrigatório com tamanho máximo definido. Retorna o texto válido.

validar_opcao_lista(prompt_usuario, opcoes_validas)
  Exibe um menu de opções para o usuário e valida a escolha. Retorna a opção escolhida.

ler_dados_sensor_simulado(sensor_id="principal")
  Retorna um valor simulado de leitura do sensor. Inicia aleatoriamente entre os quatro primeiros valores,
  depois avança a cada nova medida

calcular_status_alerta_sensor(nivel_agua_cm, altura_total_cm, limiar_atencao_p, limiar_critico_p)
  Calcula o status do alerta com base no nível de água atual: "Seguro", "Atenção", "Crítico" ou "Falha Sensor".

coletar_relato_cidadao()
  Permite o registro de uma ocorrência comunitária com tipo, local e descrição. Retorna o relato ou cancela.

processar_relatos_para_alerta(lista_relatos)
  Analisa os relatos recebidos e gera uma mensagem de alerta comunitário caso identifique situação crítica.

exibir_mensagem_console(mensagem, tipo="INFO")
  Exibe uma mensagem formatada no console com base no tipo: INFO, ERRO, ALERTA ou DESTAQUE.

main_loop_simulador()
  Executa os ciclos de monitoramento, leitura de sensores, coleta de relatos e exibição de status.

cadastrar_usuario()
  Cadastra um novo usuário com e-mail, nome, telefone, endereço e senha. Inicia o simulador após cadastro.

fazer_login()
  Permite que usuários façam login usando e-mail e senha. Se bem-sucedido, inicia o simulador.

menu()
  Interface inicial que oferece opções de cadastro, login ou sair do sistema.
